---
  swagger: '2.0'
  info:
    version: '0.1'
    title: Accounts
    description: Manage Accounts
    contact:
      name: University of Zurich - S3IT
    license:
      name: GPLv3
  basePath: /api/v1
  consumes:
    - application/json
  produces:
    - application/json
  securityDefinitions:
    tokenHeader:
      type: apiKey
      in: header
      name: X-TOKEN
  paths:
    /login:
      post:
        summary: login
        operationId: api.auth.login
        parameters:
          - name: username
            in: query
            required: true
            type: string
          - name: password
            in: query
            required: true
            type: string
        responses:
          200:
            description: authorization token
            schema:
              type: string
          401:
            description: unauthorized
          500:
            description: error while logging in
    /logout:
      post:
        summary: logout
        operationId: api.auth.logout
        responses:
          200:
            description: logged out
        security:
          - tokenHeader: []
    /admins:
      get:
        description: Get all admins
        x-swagger-router-controller: api.admin
        operationId: get_admins
        responses:
          200:
            description: List of all admins
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          401:
            description: Not authorized
        security:
          - tokenHeader: []
      post:
        description: Assign user to admins
        x-swagger-router-controller: api.admin
        operationId: add_admin
        parameters:
          - name: name
            in: query
            description: Name of the user to be added to admins
            required: true
            type: string
        responses:
          201:
            description: User added to admins
          401:
            description: Not authorized
          404:
            description: User not found
          500:
            description: Conflict during add
        security:
          - tokenHeader: []
      delete:
        description: Remove user to admins
        x-swagger-router-controller: api.admin
        operationId: remove_admin
        parameters:
          - name: name
            in: query
            description: Name of the user to be removed from admins
            required: true
            type: string
        responses:
          201:
            description: User removed from admins
          401:
            description: Not authorized
          404:
            description: User not found
          500:
            description: Conflict during remove
        security:
          - tokenHeader: []
    /services:
      get:
        description: Get all service accounts
        x-swagger-router-controller: api.admin
        operationId: get_services
        responses:
          200:
            description: List of all services
            schema:
              type: array
              items:
                $ref: '#/definitions/Service'
          401:
            description: Not authorized
        security:
          - tokenHeader: []
      post:
        description: Service to add
        x-swagger-router-controller: api.admin
        operationId: add_service
        parameters:
          - name: name
            in: query
            description: Service name
            required: true
            type: string
        responses:
          201:
            description: Service added
            schema:
              $ref: '#/definitions/Service'
          401:
            description: Not authorized
          500:
            description: Conflict during add
        security:
          - tokenHeader: []
      delete:
        description: Remove service
        x-swagger-router-controller: api.admin
        operationId: remove_service
        parameters:
          - name: name
            in: query
            description: Service to be removed
            required: true
            type: string
        responses:
          200:
            description: Service removed
          401:
            description: Not authorized
          404:
            description: Service not found
          500:
            description: Conflict during remove
        security:
          - tokenHeader: []
    /find:
      get:
        description: Find user by name
        x-swagger-router-controller: api.user
        operationId: find_user
        parameters:
        - name: name
          in: query
          description: username
          required: true
          type: string
        responses:
          200:
            description: Profile information for a user
            schema:
              $ref: '#/definitions/User'
          401:
            description: Not authorized
          404:
            description: User not found
        security:
          - tokenHeader: []
    /resources:
      get:
        description: Get all resources
        x-swagger-router-controller: api.resource
        operationId: get_resources
        responses:
          200:
            description: List of all resources
            schema:
              type: array
              items:
                $ref: '#/definitions/Resource'
          401:
            description: Not authorized
        security:
          - tokenHeader: []
      post:
        description: Add resource
        x-swagger-router-controller: api.resource
        operationId: add_resource
        parameters:
          - name: name
            in: query
            description: Name of the resource to be added
            required: true
            type: string
        responses:
          201:
            description: Resource added
            schema:
              $ref: '#/definitions/Resource'
          401:
            description: Not authorized
          500:
            description: Conflict during add
        security:
          - tokenHeader: []
    /resource/{rid}:
      get:
        description: Return groups using this resource
        x-swagger-router-controller: api.resource
        operationId: get_resource_groups
        parameters:
          - name: rid
            in: path
            description: resource id
            required: true
            type: integer
            format: int32
        responses:
          200:
            description: Groups associated with resource
            schema:
              type: array
              items:
                $ref: '#/definitions/Group'
          401:
            description: Not authorized
          404:
            description: Resource does not exist
        security:
          - tokenHeader: []
      post:
        description: Update an existing resource
        x-swagger-router-controller: api.resource
        operationId: update_resource
        parameters:
          - name: rid
            in: path
            description: resource id
            required: true
            type: integer
            format: int32
          - name: resource
            in: body
            description: New resource content
            required: true
            schema:
              $ref: '#/definitions/Resource'
        responses:
          200:
            description: Resource updated
          401:
            description: Not authorized
          500:
            description: Conflict during update
        security:
          - tokenHeader: []
      put:
        description: Add group to a resource
        x-swagger-router-controller: api.resource
        operationId: add_resource_group
        parameters:
          - name: rid
            in: path
            description: Target resource id
            required: true
            type: integer
            format: int32
          - name: name
            in: query
            description: Target group name
            required: true
            type: string
        responses:
          201:
            description: The group has been added
          401:
            description: Not authorized
          404:
            description: Resource or group does not exist
          500:
            description: Conflict during add
        security:
          - tokenHeader: []
      delete:
        description: Remove group from resource
        x-swagger-router-controller: api.resource
        operationId: remove_resource_group
        parameters:
          - name: rid
            in: path
            description: Target resource id
            required: true
            type: integer
            format: int32
          - name: name
            in: query
            description: Target group name
            required: true
            type: string
        responses:
          200:
            description: The group has been removed from the resource
          401:
            description: Not authorized
          404:
            description: Resource does not exist
          500:
            description: Conflict during remove
        security:
          - tokenHeader: []
    /groups:
      get:
        description: Get all groups
        x-swagger-router-controller: api.group
        operationId: get_groups
        parameters:
          - name: active
            in: query
            description: Only show active groups
            required: false
            type: boolean
        responses:
          200:
            description: All groups
            schema:
              type: array
              items:
                $ref: '#/definitions/Group'
          401:
            description: Not authorized
        security:
          - tokenHeader: []
      post:
        description: Creates a new group, duplicate names are not allowed
        x-swagger-router-controller: api.group
        operationId: add_group
        parameters:
          - name: group
            in: body
            required: true
            schema:
              $ref: '#/definitions/Group'
        responses:
          201:
            description: Group added
            schema:
              $ref: '#/definitions/Group'
          403:
            description: User is not a group administrator
          500:
            description: Conflicting state during update
        security:
          - tokenHeader: []
    /groups/{gid}:
      get:
        description: Return members of a group
        x-swagger-router-controller: api.group
        operationId: get_group_users
        parameters:
          - name: gid
            in: path
            description: group id
            required: true
            type: integer
            format: int32
        responses:
          200:
            description: Members of a group
            schema:
              type: array
              items:
                $ref: '#/definitions/Member'
          401:
            description: Not authorized
          404:
            description: Group does not exist
        security:
          - tokenHeader: []
      post:
        description: Update an existing group
        x-swagger-router-controller: api.group
        operationId: update_group
        parameters:
          - name: gid
            in: path
            description: group id
            required: true
            type: integer
            format: int32
          - name: group
            in: body
            description: New group content
            required: true
            schema:
              $ref: '#/definitions/Group'
        responses:
          200:
            description: Group updated
          401:
            description: Not authorized
          500:
            description: Conflict during update
        security:
          - tokenHeader: []
      put:
        description: Add member to a group
        x-swagger-router-controller: api.group
        operationId: add_group_user
        parameters:
          - name: gid
            in: path
            description: Target group id
            required: true
            type: integer
            format: int32
          - name: user
            in: query
            description: Target user
            required: true
            type: string
          - name: admin
            in: query
            description: Mark user as group admin
            required: false
            type: boolean
        responses:
          201:
            description: The user has been added
          401:
            description: Not authorized
          404:
            description: Group does not exist
          500:
            description: Conflict during add
        security:
          - tokenHeader: []
      delete:
        description: Remove member from a group
        x-swagger-router-controller: api.group
        operationId: remove_group_user
        parameters:
          - name: gid
            in: path
            description: Target group id
            required: true
            type: integer
            format: int32
          - name: user
            in: query
            description: Target user
            required: true
            type: string
        responses:
          200:
            description: The user has been removed
          401:
            description: Not authorized
          404:
            description: Group does not exist
          500:
            description: Conflict during remove
        security:
          - tokenHeader: []
    /users:
      get:
        description: Get all users
        x-swagger-router-controller: api.user
        operationId: get_users
        responses:
          200:
            description: List of all users
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          401:
            description: Not authorized
        security:
          - tokenHeader: []
      post:
        description: Create user
        x-swagger-router-controller: api.user
        operationId: add_user
        parameters:
          - name: user
            in: body
            description: User to be added
            required: true
            schema:
              $ref: '#/definitions/User'
        responses:
          201:
            description: User added
            schema:
              $ref: '#/definitions/User'
          401:
            description: Not authorized
          500:
            description: Conflict during create
        security:
          - tokenHeader: []
      delete:
        description: Remove user
        x-swagger-router-controller: api.user
        operationId: remove_user
        parameters:
          - name: name
            in: query
            description: User to be removed
            required: true
            type: string
        responses:
          200:
            description: User deleted
          401:
            description: Not authorized
          500:
            description: Conflict during create
        security:
          - tokenHeader: []
    /users/{uid}:
      get:
        description: Return user profile
        x-swagger-router-controller: api.user
        operationId: get_user
        parameters:
          - name: uid
            in: path
            description: user id
            required: true
            type: integer
            format: int32
        responses:
          200:
            description: Profile information for a user
            schema:
              $ref: '#/definitions/User'
          404:
            description: User not found
        security:
          - tokenHeader: []
    /me:
      get:
        description: Return current user profile
        x-swagger-router-controller: api.user
        operationId: get_myself
        responses:
          200:
            description: Profile information for a user
            schema:
              $ref: '#/definitions/User'
          500:
            description: Internal error
        security:
          - tokenHeader: []
  definitions:
    Group:
      type: object
      required:
        - name
        - dom_name
        - active
      properties:
        name:
          type: string
        dom_name:
          type: string
        active:
          type: boolean
    Resource:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        active:
          type: boolean
        groups:
          type: array
          items:
            $ref: '#/definitions/Group'
    User:
      type: object
      required:
        - dom_name
        - full_name
      properties:
        dom_name:
          type: string
        full_name:
          type: string
        groups:
          type: array
          items:
            $ref: '#/definitions/Group'
    Member:
      type: object
      properties:
        dom_name:
          type: string
        full_name:
          type: string
        admin:
          type: boolean
    Service:
      type: object
      properties:
        name:
          type: string
        access:
          type: string
          readOnly: true
        secret:
          type: string
          readOnly: true
